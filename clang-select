#!/bin/bash

TAG="[clang-select]:"
VERBOSE=0

case $1 in
	--setup) CASE=1 ;;
	--setup=*)
		CASE=1
		PATH=${1#*=}
		;;
	-a|--apple) CASE=2 ;;
	-m|--multi) CASE=3 ;;
	--clean) CASE=4 ;;

	--vsetup)
		CASE=1
		VERBOSE=1
		;;
	--vsetup=*)
		CASE=1
		PATH=${1#*=}
		VERBOSE=1
		;;
	-va|--vapple)
		CASE=2
		VERBOSE=1
		;;
	-vm|--vmulti)
		CASE=3
		VERBOSE=1
		;;
	--vclean)
		CASE=4
		VERBOSE=1
		;;

	*)
		echo ""
		echo "usage: ./clang-select [ <option> ]"
		echo ""
		echo "    --setup, --setup=/path/to/multicompiler/clang"
		echo "                 ...  Setup symbolic links for simple multicompiler switching."
		echo "                      Path is optional. The default is 'multicompiler/build/bin/clang'"
		echo ""
		echo "    --clean      ...  Restores Apple's clang and removes symlinks"
		echo ""
		echo "    -a, --apple  ...  Switch Xcode to use the Default Compiler (APPLE LLVM)"
		echo "    -m, --multi  ...  Switch Xcode to use the Multicompiler"
		echo "    -h, -help    ...  This information"
		echo ""
		echo "    -v[flag]     ...  Add verbosity to any flag"
		echo "                      (e.g. --vsetup, -va, --vmulti)"
		echo ""
		echo "examples:      ./clang-select --setup"
		echo "               ./clang-select --setup ~/llvm/bin/clang"
		echo "               ./clang-select -a"
		echo ""
		exit 0
	;;
esac

if [[ "$(whoami)" != "root" ]]; then
	echo "$TAG script not ran as root, we'll try using sudo when needed..."
	echo "$TAG if this fails, try rerunning with sudo"
	echo ""
fi

XCODE_SEL="xcode-select -p"
echo "$TAG Searching for clang under... $($XCODE_SEL)"
CLANG="$(find "$($XCODE_SEL)" | grep /bin/clang$)"

if [[ $CLANG == "" ]]; then 
	echo "$TAG clang not found under... $($XCODE_SEL)."
	exit -1
else
	echo "$TAG clang found... $CLANG"
fi

BIN_DIR=$(dirname "$CLANG")
CLANG_APPLE="$BIN_DIR/clang_apple"
LLVM_DIR="$( cd "$( dirname "$0" )"; pwd )"
CLANG_MULTI="$LLVM_DIR/build/bin/clang"
MULTI_LINK="$BIN_DIR/clang_multi"
BACKUP="$BIN_DIR/clang.orig"


if [[ CASE -eq 1 ]]; then
	if [[ $PATH != "" ]]; then
		if [[ -d $PATH ]]; then
			TEST="$(cd "$PATH"; pwd)/clang"
			if [[ -f $TEST ]]; then
				CLANG_MULTI=$TEST
			else
				echo "$TAG multicompiler clang not found in... $2"
				echo "$TAG check that your --setup=/path/to/multi/clang is correct"
				exit -1
			fi
		fi
		if [[ -f $PATH ]]; then
			CLANG_MULTI=$PATH
		fi
	fi
fi

if [[ ! -f $CLANG_MULTI ]]; then
	echo "$TAG multicompiler clang not found in... $CLANG_MULTI"
	exit -1
else
	echo "$TAG using multicompiler clang location... $CLANG_MULTI"
fi

echo ""

case $CASE in
	1) # setup
		if [[ -h $CLANG ]]; then
			if [[ -f $CLANG_APPLE ]]; then
				echo "$TAG clang found is already a symlink..."
				echo "$TAG setup probably already ran."
				echo "$TAG Use -a/--apple or -m/--multi to choose which compiler to use."
			fi
		else
			TYPE="$(file -b "$CLANG")"
			if [[ $TYPE =~ executable ]]; then
				echo "$TAG backing up clang"
				if [[ $VERBOSE -eq 1 ]]; then echo "sudo cp \"$CLANG\" \"$BACKUP\""; fi
				sudo cp "$CLANG" "$BACKUP"

				echo "$TAG moving clang to clang_apple..."
				if [[ $VERBOSE -eq 1 ]]; then echo "sudo mv \"$CLANG\" \"$CLANG_APPLE\""; fi
				sudo mv "$CLANG" "$CLANG_APPLE"

				echo "$TAG creating clang -> clang_apple symlink..."
				if [[ $VERBOSE -eq 1 ]]; then echo "sudo ln -s \"$CLANG_APPLE\" \"$CLANG\""; fi
				sudo ln -s "$CLANG_APPLE" "$CLANG"

				echo "$TAG creating clang_multi -> multicompiler clang symlink"
				if [[ $VERBOSE -eq 1 ]]; then echo "sudo ln -s \"$CLANG_MULTI\" \"$MULTI_LINK\""; fi
				sudo ln -s "$CLANG_MULTI" "$MULTI_LINK"

				echo "$TAG setup successful."
			else
				echo "$TAG unresolvable error (500)"
			fi
		fi
	
	;;

	2) # apple
		if [[ -h $CLANG ]]; then
			echo "$TAG removing current link..."
			if [[ $VERBOSE -eq 1 ]]; then echo "sudo rm \"$CLANG\""; fi
			sudo rm "$CLANG"
			
			echo "$TAG symlinking to clang -> clang_apple..."
			if [[ $VERBOSE -eq 1 ]]; then echo "sudo ln -s \"$CLANG_APPLE\" \"$CLANG\""; fi
			sudo ln -s "$CLANG_APPLE" "$CLANG"

			echo ""
			echo "$TAG Xcode's \"Default Compiler\" is now the Apple LLVM Clang."
		else
			echo "$TAG clang found isn't a symlink..."
			echo "$TAG try rerunning with the --setup flag, or -h for help"
		fi
	;;

	3) # multi
		if [[ -h $CLANG ]]; then
			echo "$TAG removing current link..."
			if [[ $VERBOSE -eq 1 ]]; then echo "sudo rm \"$CLANG\""; fi
			sudo rm "$CLANG"
			
			echo "$TAG symlinking to clang -> clang_apple..."
			if [[ $VERBOSE -eq 1 ]]; then echo "sudo ln -s \"$MULTI_LINK\" \"$CLANG\""; fi
			sudo ln -s "$MULTI_LINK" "$CLANG"

			echo ""
			echo "$TAG Xcode's \"Default Compiler\" is now the Multicompiler Clang."
		else
			echo "$TAG clang found isn't a symlink..."
			echo "$TAG try rerunning with the --setup flag, or -h for help"
		fi
	;;

	4)
		if [[ -f $BACKUP ]]; then
			
			if [[ -h $CLANG ]]; then
				echo "$TAG removing clang..."
				if [[ $VERBOSE -eq 1 ]]; then echo "sudo rm \"$CLANG\""; fi
				sudo rm "$CLANG"
			fi

			if [[ -f $CLANG_APPLE ]]; then
				echo "$TAG removing clang_apple..."
				if [[ $VERBOSE -eq 1 ]]; then echo "sudo rm \"$CLANG_APPLE\""; fi
				sudo rm "$CLANG_APPLE"
			fi

			if [[ -h $MULTI_LINK ]]; then
				echo "$TAG removing clang_multi..."
				if [[ $VERBOSE -eq 1 ]]; then echo "sudo rm \"$MULTI_LINK\""; fi
				sudo rm "$MULTI_LINK"
			fi

			echo "$TAG restoring clang from backup..."
			if [[ $VERBOSE -eq 1 ]]; then echo "sudo cp \"$BACKUP\" \"$CLANG\""; fi
			sudo cp "$BACKUP" "$CLANG"
		else
			echo "$TAG clang backup file doesn't exist yet. has clang-select been ran with '--setup'?"
		fi
	;;

	*);;
esac

echo "$TAG exiting..."
exit 0